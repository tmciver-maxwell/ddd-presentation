#+REVEAL_THEME: night
#+OPTIONS: toc:0, num:nil, f:t
#+REVEAL_ROOT: file:///Users/timmciver/Workspace/reveal.js

* DDD: What Is It?

** Domain-Driven Design
#+ATTR_REVEAL: :frag (appear)
- Emphasizes the domain model as the central piece of an application
- Emphasizes direct collaboration between developers and domain experts
- Results in a "Ubiquitous Language" that is used to communicate domain concepts

* Building Blocks

** 4 Basic Types
- Entities
- Value Objects
- Repositories
- Services

** Entities
are domain objects whose identity is NOT defined by its attributes
#+ATTR_REVEAL: :frag (appear)
- Consider two people with the same name; they are not the same entity!
- Some entities will have natural identifiers. E.g., SSN.
- If there is no natural identifier, one must be generated for it at creation time.

** Value Objects
are objects that ARE defined by their attributes
#+ATTR_REVEAL: :frag (appear)
- Need no separate identifier
- Should be immutable

** Example
#+BEGIN_SRC php
// Entity
class User {
  private $id; // could have used SSN, if it's available
  private $name;
  private $address;

  public function changeName($newName) { $this->name = $newName; }
  public function changeAddress($newAddress) { $this->address = $newAddress; }
}

// Value Object
class Name {
  private $firstName;
  private $lastName;
}

// Value Object
class Address {
  private $street;
  private $city;
  private $state;
  private $zip
}
#+END_SRC

** Bounded Context



